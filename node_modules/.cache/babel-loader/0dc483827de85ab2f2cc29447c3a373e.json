{"ast":null,"code":"var _jsxFileName = \"/Users/patrickwellins/Desktop/games/snake/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport EventListener, { withOptions } from 'react-event-listener';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  let dx = 0;\n  let dy = 0;\n  useEffect(() => {\n    const canvas = cRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    setInterval(() => {\n      draw(ctx, canvas);\n    }, 10);\n    window.addEventListener('keydown', logKey);\n    return () => {\n      window.removeEventListener('keydown', logKey);\n    };\n  });\n\n  const logKey = event => {\n    if (event.code === \"ArrowRight\") {\n      dx += 20;\n    } else if (event.code === \"ArrowLeft\") {\n      dx -= 20;\n    } else if (event.code === \"ArrowUp\") {\n      dy -= 20;\n    } else if (event.code === \"ArrowDown\") {\n      dy += 20;\n    }\n  };\n\n  function draw(ctx, canvas) {\n    const squareSide = 20;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.beginPath();\n    ctx.rect(canvas.width / 2 + dx, canvas.height / 2 + dy, squareSide, squareSide);\n    ctx.fillStyle = \"#0095DD\";\n    ctx.fill();\n    ctx.closePath();\n  }\n\n  const cRef = useRef(null);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      style: {\n        background: \"#eee\",\n        display: \"block\",\n        margin: \"0 auto\"\n      },\n      id: \"myCanvas\",\n      width: \"480\",\n      height: \"320\",\n      ref: cRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"URm58pgjXa+ECeiVHN1N38QXQss=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/patrickwellins/Desktop/games/snake/src/App.js"],"names":["React","useState","useEffect","useRef","EventListener","withOptions","App","dx","dy","canvas","cRef","current","ctx","getContext","setInterval","draw","window","addEventListener","logKey","removeEventListener","event","code","squareSide","clearRect","width","height","beginPath","rect","fillStyle","fill","closePath","background","display","margin"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,aAAP,IAAuBC,WAAvB,QAAyC,sBAAzC;;;AAIA,SAASC,GAAT,GAAe;AAAA;;AAEb,MAAIC,EAAE,GAAG,CAAT;AACA,MAAIC,EAAE,GAAG,CAAT;AAEAN,EAAAA,SAAS,CAAC,MAAM;AAEZ,UAAMO,MAAM,GAAGC,IAAI,CAACC,OAApB;AACA,UAAMC,GAAG,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAZ;AACAC,IAAAA,WAAW,CAAC,MAAM;AAACC,MAAAA,IAAI,CAACH,GAAD,EAAMH,MAAN,CAAJ;AAAmB,KAA3B,EAA6B,EAA7B,CAAX;AACAO,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCC,MAAnC;AACA,WAAO,MAAM;AACbF,MAAAA,MAAM,CAACG,mBAAP,CAA2B,SAA3B,EAAsCD,MAAtC;AACH,KAFG;AAGH,GATQ,CAAT;;AAWA,QAAMA,MAAM,GAAIE,KAAD,IAAW;AACxB,QAAIA,KAAK,CAACC,IAAN,KAAe,YAAnB,EAAgC;AAC9Bd,MAAAA,EAAE,IAAI,EAAN;AACD,KAFD,MAGK,IAAIa,KAAK,CAACC,IAAN,KAAe,WAAnB,EAA+B;AAClCd,MAAAA,EAAE,IAAI,EAAN;AACD,KAFI,MAGA,IAAIa,KAAK,CAACC,IAAN,KAAe,SAAnB,EAA6B;AAChCb,MAAAA,EAAE,IAAI,EAAN;AACD,KAFI,MAGA,IAAIY,KAAK,CAACC,IAAN,KAAe,WAAnB,EAA+B;AAClCb,MAAAA,EAAE,IAAI,EAAN;AACD;AACF,GAbD;;AAeA,WAASO,IAAT,CAAcH,GAAd,EAAmBH,MAAnB,EAA2B;AAE3B,UAAMa,UAAU,GAAG,EAAnB;AACAV,IAAAA,GAAG,CAACW,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoBd,MAAM,CAACe,KAA3B,EAAkCf,MAAM,CAACgB,MAAzC;AACAb,IAAAA,GAAG,CAACc,SAAJ;AACAd,IAAAA,GAAG,CAACe,IAAJ,CAASlB,MAAM,CAACe,KAAP,GAAa,CAAb,GAAiBjB,EAA1B,EAA8BE,MAAM,CAACgB,MAAP,GAAe,CAAf,GAAoBjB,EAAlD,EAAsDc,UAAtD,EAAkEA,UAAlE;AACAV,IAAAA,GAAG,CAACgB,SAAJ,GAAgB,SAAhB;AACAhB,IAAAA,GAAG,CAACiB,IAAJ;AACAjB,IAAAA,GAAG,CAACkB,SAAJ;AAED;;AAEC,QAAMpB,IAAI,GAAGP,MAAM,CAAC,IAAD,CAAnB;AACA,sBACE;AAAA,2BACI;AAAS,MAAA,KAAK,EAAE;AAAE4B,QAAAA,UAAU,EAAE,MAAd;AAAsBC,QAAAA,OAAO,EAAE,OAA/B;AAAwCC,QAAAA,MAAM,EAAE;AAAhD,OAAhB;AAA4E,MAAA,EAAE,EAAC,UAA/E;AAA0F,MAAA,KAAK,EAAC,KAAhG;AAAsG,MAAA,MAAM,EAAC,KAA7G;AAAmH,MAAA,GAAG,EAAEvB;AAAxH;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAjDQJ,G;;KAAAA,G;AAmDT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport EventListener, {withOptions} from 'react-event-listener';\n\n\n\nfunction App() {\n\n  let dx = 0\n  let dy = 0\n\n  useEffect(() => {\n\n      const canvas = cRef.current\n      const ctx = canvas.getContext(\"2d\");\n      setInterval(() => {draw(ctx, canvas);}, 10)\n      window.addEventListener('keydown', logKey);\n      return () => {\n      window.removeEventListener('keydown', logKey);\n  }\n  })\n\n  const logKey = (event) => {\n    if (event.code === \"ArrowRight\"){\n      dx += 20\n    }\n    else if (event.code === \"ArrowLeft\"){\n      dx -= 20\n    }\n    else if (event.code === \"ArrowUp\"){\n      dy -= 20\n    }\n    else if (event.code === \"ArrowDown\"){\n      dy += 20\n    }\n  }\n\n  function draw(ctx, canvas) {\n\n  const squareSide = 20\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.beginPath()\n  ctx.rect(canvas.width/2 + dx, canvas.height /2  + dy, squareSide, squareSide);\n  ctx.fillStyle = \"#0095DD\";\n  ctx.fill();\n  ctx.closePath();\n\n}\n\n  const cRef = useRef(null)\n  return (\n    <div>\n        <canvas  style={{ background: \"#eee\", display: \"block\", margin: \"0 auto\" }} id=\"myCanvas\" width=\"480\" height=\"320\" ref={cRef}></canvas>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/patrickwellins/Documents/games/snake/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst APPLERADIUS = 10;\n\nclass GameContainer {\n  constructor(width, height) {\n    this.width = width;\n    this.height = height;\n    this.wallCollision = false;\n  }\n\n  update(snake, apple) {\n    // Update the snake, did it eat the apple or not\n    snake.head.x === apple.x && snake.head.y === apple.y ? snake.update(true) : snake.update(false); // Update the apple, was it eaten or not\n\n    if (snake.head.x === apple.x && snake.head.y === apple.y) {\n      // non random regeneration of apple for now\n      apple.x = 50;\n      apple.y = 50;\n    } // check of snake collided with wall\n\n\n    this.wallCollision = snake.head.x > this.width || snake.head.x <= 0 || snake.head.y >= this.height || snake.head.y <= 0 ? true : false;\n  }\n\n}\n\nclass Snake {\n  constructor() {\n    this.segmentLocations = [{\n      x: 35,\n      y: 50\n    }, {\n      x: 30,\n      y: 50\n    }];\n    this.direction = \"right\";\n    this.head = this.segmentLocations[0];\n  }\n\n  update(addSegment) {\n    const newHead = {\n      x: this.head.x,\n      y: this.head.y\n    };\n\n    switch (this.direction) {\n      case \"right\":\n        newHead.x += 25;\n        break;\n\n      case \"left\":\n        newHead.x -= 25;\n        break;\n\n      case \"down\":\n        newHead.y += 25;\n        break;\n\n      case \"up\":\n        newHead.y -= 25;\n        break;\n\n      default:\n        console.log(\"Error: Needs Direction\");\n    }\n\n    this.segmentLocations.unshift(newHead);\n\n    if (!addSegment) {\n      this.segmentLocations.pop();\n    }\n\n    console.log(this.segmentLocations);\n  }\n\n  changeDirection(direction) {\n    this.direction = direction;\n  }\n\n}\n\nclass Apple {\n  constructor(location) {\n    this.x = location.x;\n    this.y = location.y;\n  }\n\n}\n\nconst Game = () => {\n  _s();\n\n  const gameContainer = new GameContainer(480, 320);\n  const snake = new Snake();\n  const apple = new Apple({\n    x: 50,\n    y: 100\n  });\n\n  const gameLogic = (gameContainer, snake, apple, ctx) => {\n    ctx.clearRect(0, 0, gameContainer.width, gameContainer.height);\n    ctx.fillStyle = 'black';\n    ctx.fillRect(0, 0, gameContainer.x, gameContainer.y);\n    ctx.fillStyle = 'green';\n\n    for (let index = 0; index < snake.segmentLocations.length; index++) {\n      const segment = snake.segmentLocations[index];\n      ctx.fillRect(segment.x, segment.y, 25, 25);\n    }\n\n    ctx.fillStyle = 'red';\n    ctx.fillRect(apple.x, apple.y, 25, 25);\n    gameContainer.update(snake, apple);\n  };\n\n  const canvasRef = useRef(null);\n\n  const controller = event => {\n    switch (event.code) {\n      case \"ArrowRight\":\n        snake.changeDirection(\"right\");\n        break;\n\n      case \"ArrowLeft\":\n        snake.changeDirection(\"left\");\n        break;\n\n      case \"ArrowUp\":\n        snake.changeDirection(\"up\");\n        break;\n\n      case \"ArrowDown\":\n        snake.changeDirection(\"down\");\n        break;\n\n      default:\n        break;\n    }\n\n    switch (event.keyCode) {\n      case 32:\n        snake.pauseSnake();\n        break;\n\n      case 13:\n        snake.go();\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    const canvasWidth = canvas.width / 2;\n    const canvasHeight = canvas.height / 2;\n    let gameState = setInterval(() => {\n      gameLogic(gameContainer, snake, apple, ctx);\n    }, 150);\n    window.addEventListener('keydown', controller);\n    return () => {\n      clearInterval(gameState);\n      window.removeEventListener('keydown', controller);\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        fontFamily: \"'Press Start 2P', cursive\",\n        textAlign: \"center\"\n      },\n      children: \" Snake\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      style: {\n        background: \"#262626\",\n        display: \"block\",\n        margin: \"0 auto\"\n      },\n      id: \"myCanvas\",\n      width: \"480\",\n      height: \"320\",\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Game, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n\n_c = Game;\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Game, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Game\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/patrickwellins/Documents/games/snake/src/App.js"],"names":["React","useState","useEffect","useRef","APPLERADIUS","GameContainer","constructor","width","height","wallCollision","update","snake","apple","head","x","y","Snake","segmentLocations","direction","addSegment","newHead","console","log","unshift","pop","changeDirection","Apple","location","Game","gameContainer","gameLogic","ctx","clearRect","fillStyle","fillRect","index","length","segment","canvasRef","controller","event","code","keyCode","pauseSnake","go","canvas","current","getContext","canvasWidth","canvasHeight","gameState","setInterval","window","addEventListener","clearInterval","removeEventListener","fontFamily","textAlign","background","display","margin","App"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nconst APPLERADIUS = 10\n\nclass GameContainer {\n\n  constructor(width, height){\n    this.width = width\n    this.height = height\n    this.wallCollision = false\n  }\n\n  update(snake, apple){\n    // Update the snake, did it eat the apple or not\n    (snake.head.x === apple.x && snake.head.y === apple.y)? snake.update(true): snake.update(false)\n    // Update the apple, was it eaten or not\n    if (snake.head.x === apple.x && snake.head.y === apple.y){\n      // non random regeneration of apple for now\n       apple.x = 50\n       apple.y = 50\n    }\n    // check of snake collided with wall\n    this.wallCollision = (snake.head.x > this.width || snake.head.x <= 0 || snake.head.y >= this.height || snake.head.y <= 0)?  true: false\n  }\n\n}\n\nclass Snake {\n\n  constructor()\n  {\n    this.segmentLocations = [{x: 35, y: 50}, {x: 30, y: 50}]\n    this.direction = \"right\"\n    this.head = this.segmentLocations[0]\n  }\n\n  update(addSegment){\n\n    const newHead = {x:this.head.x, y:this.head.y}\n\n    switch (this.direction) {\n      case \"right\":\n        newHead.x += 25\n        break\n      case \"left\":\n        newHead.x -= 25\n        break\n      case \"down\":\n        newHead.y += 25\n        break\n      case \"up\":\n          newHead.y -= 25\n          break\n      default:\n        console.log(\"Error: Needs Direction\")\n    }\n    this.segmentLocations.unshift(newHead)\n    \n    if (!addSegment){\n      this.segmentLocations.pop()\n    }\n    console.log(this.segmentLocations)\n  }\n\n  changeDirection(direction){\n    this.direction = direction\n  }\n\n}\n\nclass Apple {\n\n  constructor(location)\n  {\n    this.x = location.x\n    this.y = location.y\n  }\n}\n\n\nconst Game = () => {\n\n  const gameContainer = new GameContainer(480, 320)\n  const snake = new Snake()\n  const apple = new Apple({x:50, y:100})\n\n  const gameLogic = (gameContainer, snake, apple, ctx) => {\n\n    ctx.clearRect(0,0, gameContainer.width, gameContainer.height)\n    ctx.fillStyle = 'black';\n    ctx.fillRect(0, 0, gameContainer.x, gameContainer.y)\n    ctx.fillStyle = 'green';\n    for (let index = 0; index < snake.segmentLocations.length; index++) {\n      const segment = snake.segmentLocations[index]\n      ctx.fillRect(segment.x, segment.y, 25, 25);\n    }\n    ctx.fillStyle = 'red';\n    ctx.fillRect(apple.x, apple.y, 25, 25)\n    gameContainer.update(snake, apple)\n}\n\n  const canvasRef = useRef(null)\n\n  const controller = (event) => {\n\n    switch (event.code) {\n      case \"ArrowRight\":\n        snake.changeDirection(\"right\")\n        break\n      case \"ArrowLeft\":\n        snake.changeDirection(\"left\")\n        break\n      case \"ArrowUp\":\n        snake.changeDirection(\"up\")\n        break\n      case \"ArrowDown\":\n        snake.changeDirection(\"down\")\n        break\n      default:\n        break;\n    }\n    switch (event.keyCode ) {\n      case 32:\n        snake.pauseSnake()\n        break\n      case 13:\n        snake.go()\n        break\n      default:\n        break;\n    }\n\n  }\n\n \n\n  useEffect(() => {\n\n\n      const canvas = canvasRef.current\n      const ctx = canvas.getContext(\"2d\");\n      const canvasWidth = canvas.width/2\n      const canvasHeight = canvas.height/2\n\n      let gameState = setInterval(() => {gameLogic(gameContainer, snake, apple, ctx);}, 150)\n      window.addEventListener('keydown', controller);\n\n      return () => {\n      clearInterval(gameState)\n      window.removeEventListener('keydown', controller);\n      }\n  })\n\n\n  return(\n    <div>\n        <h1 style ={{fontFamily: \"'Press Start 2P', cursive\", textAlign: \"center\"}}> Snake</h1>\n        <canvas\n          style={{\n          background: \"#262626\",\n          display: \"block\",\n          margin: \"0 auto\" }}\n          id=\"myCanvas\"\n          width=\"480\"\n          height=\"320\"\n          ref={canvasRef}></canvas>\n    </div>\n  )\n  }\n\nfunction App() {\n\n  return(\n    <>\n    <Game/>\n    </>\n  )\n\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
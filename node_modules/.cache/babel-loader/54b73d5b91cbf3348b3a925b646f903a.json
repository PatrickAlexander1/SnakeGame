{"ast":null,"code":"var _jsxFileName = \"/Users/patrickwellins/Documents/games/snake/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport _ from 'lodash';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst APPLERADIUS = 10;\n\nclass GameContainer {\n  constructor(width, height) {\n    this.width = width;\n    this.height = height;\n    this.wallCollision = false;\n  }\n\n  update(snake, apple) {\n    // Update the snake, did it eat the apple or not\n    snake.segmentLocations[0][0] === apple.x && snake.segmentLocations[0][1] === apple.y ? snake.update(true) : snake.update(false); // Update the apple, was it eaten or not\n\n    if (snake.segmentLocations[0][0] === apple.x && snake.segmentLocations[0][1] === apple.y) {\n      // non random regeneration of apple for now\n      apple.x = 100;\n      apple.y = 100;\n    } // check of snake collided with wall\n\n\n    this.wallCollision = snake.segmentLocations[0][0] >= this.width - 25 || snake.segmentLocations[0][0] <= 0 || snake.segmentLocations[0][1] >= this.height - 25 || snake.segmentLocations[0][1] <= 0 ? true : false;\n  }\n\n}\n\nclass Snake {\n  constructor() {\n    this.segmentLocations = [[50, 50], [25, 50], [0, 50]];\n    this.head = this.segmentLocations[0];\n    this.direction = \"right\";\n    this.crashed = false;\n  }\n\n  checkIfCrashed() {\n    this.segmentLocations.slice(1).forEach(segment => {\n      if (_.isEqual(this.head, segment)) {\n        this.crashed = true;\n      }\n    });\n  }\n\n  update(addSegment) {\n    if (!this.crashed) {\n      let currentHead;\n\n      if (this.direction === \"right\") {\n        currentHead = [this.head[0] + 25, this.head[1]];\n      } else if (this.direction === \"left\") {\n        currentHead = [this.head[0] - 25, this.head[1]];\n      } else if (this.direction === \"up\") {\n        currentHead = [this.head[0], this.head[1] - 25];\n      } else if (this.direction === \"down\") {\n        currentHead = [this.head[0], this.head[1] + 25];\n      }\n\n      this.head = currentHead;\n      this.segmentLocations = [currentHead].concat(this.segmentLocations);\n\n      if (!addSegment) {\n        this.segmentLocations.pop();\n      }\n\n      this.checkIfCrashed();\n    }\n  }\n\n  changeDirection(direction) {\n    this.direction = direction;\n  }\n\n}\n\nclass Apple {\n  constructor(location) {\n    this.x = location.x;\n    this.y = location.y;\n  }\n\n}\n\nconst Game = () => {\n  _s();\n\n  const gameContainer = new GameContainer(400, 400);\n  const snake = new Snake();\n  const apple = new Apple({\n    x: 100,\n    y: 100\n  });\n\n  const gameLogic = (gameContainer, snake, apple, ctx) => {\n    if (!gameContainer.wallCollision && !snake.crashed) {\n      gameContainer.update(snake, apple);\n      ctx.clearRect(0, 0, gameContainer.width, gameContainer.height);\n      ctx.fillStyle = 'black';\n      ctx.fillRect(0, 0, gameContainer.x, gameContainer.y);\n      ctx.fillStyle = 'green';\n\n      for (let index = 0; index < snake.segmentLocations.length; index++) {\n        const segment = snake.segmentLocations[index];\n        ctx.fillRect(segment[0], segment[1], 25, 25);\n      }\n\n      ctx.fillStyle = 'red';\n      ctx.fillRect(apple.x, apple.y, 25, 25);\n    }\n  };\n\n  const canvasRef = useRef(null);\n\n  const controller = event => {\n    switch (event.code) {\n      case \"ArrowRight\":\n        snake.changeDirection(\"right\");\n        break;\n\n      case \"ArrowLeft\":\n        snake.changeDirection(\"left\");\n        break;\n\n      case \"ArrowUp\":\n        snake.changeDirection(\"up\");\n        break;\n\n      case \"ArrowDown\":\n        snake.changeDirection(\"down\");\n        break;\n\n      default:\n        break;\n    }\n\n    switch (event.keyCode) {\n      case 32:\n        snake.pauseSnake();\n        break;\n\n      case 13:\n        snake.go();\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    let gameState = setInterval(() => {\n      gameLogic(gameContainer, snake, apple, ctx);\n    }, 150);\n    window.addEventListener('keydown', controller);\n    return () => {\n      clearInterval(gameState);\n      window.removeEventListener('keydown', controller);\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        fontFamily: \"'Press Start 2P', cursive\",\n        textAlign: \"center\"\n      },\n      children: \" Snake\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      style: {\n        background: \"#262626\",\n        display: \"block\",\n        margin: \"0 auto\"\n      },\n      id: \"myCanvas\",\n      width: \"400\",\n      height: \"400\",\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Game, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n\n_c = Game;\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Game, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Game\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/patrickwellins/Documents/games/snake/src/App.js"],"names":["React","useState","useEffect","useRef","_","APPLERADIUS","GameContainer","constructor","width","height","wallCollision","update","snake","apple","segmentLocations","x","y","Snake","head","direction","crashed","checkIfCrashed","slice","forEach","segment","isEqual","addSegment","currentHead","concat","pop","changeDirection","Apple","location","Game","gameContainer","gameLogic","ctx","clearRect","fillStyle","fillRect","index","length","canvasRef","controller","event","code","keyCode","pauseSnake","go","canvas","current","getContext","gameState","setInterval","window","addEventListener","clearInterval","removeEventListener","fontFamily","textAlign","background","display","margin","App"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport _ from 'lodash';\nconst APPLERADIUS = 10\n\nclass GameContainer {\n\n  constructor(width, height){\n    this.width = width\n    this.height = height\n    this.wallCollision = false\n  }\n\n  update(snake, apple){\n    // Update the snake, did it eat the apple or not\n    (snake.segmentLocations[0][0] === apple.x && snake.segmentLocations[0][1] === apple.y)? snake.update(true): snake.update(false)\n    // Update the apple, was it eaten or not\n    if (snake.segmentLocations[0][0] === apple.x && snake.segmentLocations[0][1] === apple.y){\n      // non random regeneration of apple for now\n       apple.x = 100\n       apple.y = 100\n    }\n    // check of snake collided with wall\n    this.wallCollision = (snake.segmentLocations[0][0] >= this.width - 25 || snake.segmentLocations[0][0] <= 0 || snake.segmentLocations[0][1] >= this.height -25 || snake.segmentLocations[0][1] <= 0)?  true: false\n  }\n\n}\n\nclass Snake {\n\n  constructor()\n  {\n    this.segmentLocations = [[50,50], [25,50], [0,50]]\n    this.head = this.segmentLocations[0]\n    this.direction = \"right\"\n    this.crashed = false\n  }\n\n  checkIfCrashed(){\n    this.segmentLocations.slice(1,).forEach((segment) =>{\n    if (_.isEqual(this.head, segment)){\n       this.crashed = true\n    }})\n}\n\n  update(addSegment){\n    if (!this.crashed){\n      let currentHead\n      if (this.direction === \"right\"){\n        currentHead = [this.head[0] + 25, this.head[1]]\n      }\n      else if (this.direction === \"left\"){\n        currentHead = [this.head[0] - 25, this.head[1]]\n      }\n      else if (this.direction === \"up\"){\n        currentHead = [this.head[0], this.head[1] - 25]\n      }\n      else if (this.direction === \"down\"){\n        currentHead = [this.head[0], this.head[1] + 25]\n      }\n      this.head = currentHead\n      this.segmentLocations = [currentHead].concat(this.segmentLocations)\n\n      if (!addSegment){\n        this.segmentLocations.pop()\n      }\n      this.checkIfCrashed()\n  }\n}\n\n  changeDirection(direction){\n    this.direction = direction\n  }\n\n}\n\nclass Apple {\n\n  constructor(location)\n  {\n    this.x = location.x\n    this.y = location.y\n  }\n}\n\n\nconst Game = () => {\n\n  const gameContainer = new GameContainer(400, 400)\n  const snake = new Snake()\n  const apple = new Apple({x:100, y:100})\n\n  const gameLogic = (gameContainer, snake, apple, ctx) => {\n\n    if (!gameContainer.wallCollision && !snake.crashed){\n        gameContainer.update(snake, apple)\n        ctx.clearRect(0,0, gameContainer.width, gameContainer.height)\n        ctx.fillStyle = 'black';\n        ctx.fillRect(0, 0, gameContainer.x, gameContainer.y)\n        ctx.fillStyle = 'green';\n    \n        for (let index = 0; index < snake.segmentLocations.length; index++) {\n          const segment = snake.segmentLocations[index]\n          ctx.fillRect(segment[0], segment[1], 25, 25);\n        }\n        ctx.fillStyle = 'red';\n        ctx.fillRect(apple.x, apple.y, 25, 25)\n  }\n\n}\n\n  const canvasRef = useRef(null)\n\n  const controller = (event) => {\n\n    switch (event.code) {\n      case \"ArrowRight\":\n        snake.changeDirection(\"right\")\n        break\n      case \"ArrowLeft\":\n        snake.changeDirection(\"left\")\n        break\n      case \"ArrowUp\":\n        snake.changeDirection(\"up\")\n        break\n      case \"ArrowDown\":\n        snake.changeDirection(\"down\")\n        break\n      default:\n        break;\n    }\n    switch (event.keyCode ) {\n      case 32:\n        snake.pauseSnake()\n        break\n      case 13:\n        snake.go()\n        break\n      default:\n        break;\n    }\n\n  }\n\n \n\n  useEffect(() => {\n\n\n      const canvas = canvasRef.current\n      const ctx = canvas.getContext(\"2d\");\n\n      let gameState = setInterval(() => {gameLogic(gameContainer, snake, apple, ctx);}, 150)\n      window.addEventListener('keydown', controller);\n\n      return () => {\n      clearInterval(gameState)\n      window.removeEventListener('keydown', controller);\n      }\n  })\n\n\n  return(\n    <div>\n        <h1 style ={{fontFamily: \"'Press Start 2P', cursive\", textAlign: \"center\"}}> Snake</h1>\n        <canvas\n          style={{\n          background: \"#262626\",\n          display: \"block\",\n          margin: \"0 auto\" }}\n          id=\"myCanvas\"\n          width=\"400\"\n          height=\"400\"\n          ref={canvasRef}></canvas>\n    </div>\n  )\n  }\n\nfunction App() {\n\n  return(\n    <>\n    <Game/>\n    </>\n  )\n\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
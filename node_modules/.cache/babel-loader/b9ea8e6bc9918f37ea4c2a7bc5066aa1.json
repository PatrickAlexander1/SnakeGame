{"ast":null,"code":"var _jsxFileName = \"/Users/patrickwellins/Documents/games/snake/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport _ from 'lodash';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst randomXY = (snake, gameContainerWidth, gameContainerHeight) => {\n  let goodSpot = true;\n\n  const randX = _.clamp(_.random(gameContainerWidth / 25) * 25, 25, gameContainerHeight - 25);\n\n  const randY = _.clamp(_.random(gameContainerHeight / 25) * 25, 25, gameContainerHeight - 25);\n\n  snake.segmentLocations.forEach(segment => {\n    if (_.isEqual([randX, randY], segment)) {\n      goodSpot = false;\n    }\n  });\n  return goodSpot ? [randX, randY] : randomXY(snake, gameContainerWidth, gameContainerHeight);\n};\n\nclass GameContainer {\n  constructor(width, height) {\n    this.width = width;\n    this.height = height;\n    this.wallCollision = false;\n    this.pause = false;\n  }\n\n  update(snake, apple, score, setScore) {\n    // If the game is not Paused then update\n    if (!this.pause) {\n      // Update the snake, did it eat the apple or not\n      if (snake.ateApple(apple)) {\n        // non random regeneration of apple for now\n        snake.update(true);\n        const [x, y] = randomXY(snake, this.width, this.height);\n        apple.x = x;\n        apple.y = y;\n        setScore(score + 1);\n      } else {\n        snake.update(false);\n      } // check of snake collided with wall\n\n\n      this.wallCollision = snake.segmentLocations[0][0] >= this.width || snake.segmentLocations[0][0] < 0 || snake.segmentLocations[0][1] >= this.height || snake.segmentLocations[0][1] < 0 ? true : false;\n    }\n  }\n\n  stop() {\n    this.pause = true;\n  }\n\n  start() {\n    this.pause = false;\n  }\n\n}\n\nclass Snake {\n  constructor() {\n    this.segmentLocations = [[50, 50], [25, 50], [0, 50]];\n    this.head = this.segmentLocations[0];\n    this.direction = \"right\";\n    this.crashed = false;\n  }\n\n  ateApple(apple) {\n    return this.head[0] === apple.x && this.head[1] === apple.y ? true : false;\n  }\n\n  checkIfCrashed() {\n    this.segmentLocations.slice(1).forEach(segment => {\n      if (_.isEqual(this.head, segment)) {\n        this.crashed = true;\n      }\n    });\n  }\n\n  update(addSegment) {\n    console.log(addSegment);\n\n    if (!this.crashed) {\n      let currentHead;\n\n      if (this.direction === \"right\") {\n        currentHead = [this.head[0] + 25, this.head[1]];\n      } else if (this.direction === \"left\") {\n        currentHead = [this.head[0] - 25, this.head[1]];\n      } else if (this.direction === \"up\") {\n        currentHead = [this.head[0], this.head[1] - 25];\n      } else if (this.direction === \"down\") {\n        currentHead = [this.head[0], this.head[1] + 25];\n      }\n\n      this.head = currentHead;\n      this.segmentLocations = [currentHead].concat(this.segmentLocations);\n\n      if (!addSegment) {\n        this.segmentLocations.pop();\n      }\n\n      this.checkIfCrashed();\n    }\n  }\n\n  changeDirection(direction) {\n    this.direction = direction;\n  }\n\n}\n\nclass Apple {\n  constructor(location) {\n    this.x = location.x;\n    this.y = location.y;\n  }\n\n}\n\nconst gameContainer = new GameContainer(400, 400);\nconst snake = new Snake();\nconst apple = new Apple({\n  x: 100,\n  y: 100\n});\n\nconst Game = ({\n  gameContainer,\n  snake,\n  apple\n}) => {\n  _s();\n\n  const canvasRef = useRef(null);\n  const [score, setScore] = useState(0);\n\n  const updateGameState = (gameContainer, snake, apple, ctx, score, setScore) => {\n    // Update gameContainer\n    gameContainer.update(snake, apple, score, setScore);\n\n    if (!gameContainer.wallCollision && !snake.crashed && !gameContainer.pause) {\n      // Draw Game Container\n      ctx.clearRect(0, 0, gameContainer.width, gameContainer.height);\n      ctx.fillStyle = 'black';\n      ctx.fillRect(0, 0, gameContainer.x, gameContainer.y); // Draw Snake\n\n      ctx.fillStyle = 'green';\n\n      for (let index = 0; index < snake.segmentLocations.length; index++) {\n        const segment = snake.segmentLocations[index];\n        ctx.fillRect(segment[0], segment[1], 25, 25);\n        ctx.strokeRect(segment[0], segment[1], 25, 25);\n      } // Draw Apple\n\n\n      ctx.fillStyle = 'red';\n      ctx.fillRect(apple.x, apple.y, 25, 25);\n      ctx.strokeRect(apple.x, apple.y, 25, 25);\n    }\n  };\n\n  const controller = event => {\n    switch (event.code) {\n      case \"ArrowRight\":\n        snake.changeDirection(\"right\");\n        break;\n\n      case \"ArrowLeft\":\n        snake.changeDirection(\"left\");\n        break;\n\n      case \"ArrowUp\":\n        snake.changeDirection(\"up\");\n        break;\n\n      case \"ArrowDown\":\n        snake.changeDirection(\"down\");\n        break;\n\n      default:\n        break;\n    }\n\n    switch (event.keyCode) {\n      case 32:\n        gameContainer.stop();\n        break;\n\n      case 13:\n        gameContainer.start();\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    let gameState = setInterval(() => {\n      updateGameState(gameContainer, snake, apple, ctx, score, setScore);\n    }, 150);\n    window.addEventListener('keydown', controller);\n    return () => {\n      clearInterval(gameState);\n      window.removeEventListener('keydown', controller);\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        fontFamily: \"'Press Start 2P', cursive\",\n        textAlign: \"center\"\n      },\n      children: \" Snake\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      style: {\n        background: \"#262626\",\n        display: \"block\",\n        margin: \"0 auto\"\n      },\n      id: \"myCanvas\",\n      width: \"400\",\n      height: \"400\",\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        margin: 10\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: 5,\n          border: \"solid\"\n        },\n        children: \"Pause: Space Bar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: 5,\n          border: \"solid\"\n        },\n        children: \"Continue: Enter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: 5,\n          border: \"solid\"\n        },\n        children: \"Arrow Keys Control Snake Direction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"center\"\n      },\n      children: [\"Score:\", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: () => window.location.reload(),\n      style: {\n        display: \"flex\",\n        justifyContent: \"center\"\n      },\n      children: \"New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Game, \"g9zIuiFlEsrUWguIIIMki4PpkOs=\");\n\n_c = Game;\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Game, {\n      gameContainer: gameContainer,\n      snake: snake,\n      apple: apple\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Game\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/patrickwellins/Documents/games/snake/src/App.js"],"names":["React","useState","useEffect","useRef","_","randomXY","snake","gameContainerWidth","gameContainerHeight","goodSpot","randX","clamp","random","randY","segmentLocations","forEach","segment","isEqual","GameContainer","constructor","width","height","wallCollision","pause","update","apple","score","setScore","ateApple","x","y","stop","start","Snake","head","direction","crashed","checkIfCrashed","slice","addSegment","console","log","currentHead","concat","pop","changeDirection","Apple","location","gameContainer","Game","canvasRef","updateGameState","ctx","clearRect","fillStyle","fillRect","index","length","strokeRect","controller","event","code","keyCode","canvas","current","getContext","gameState","setInterval","window","addEventListener","clearInterval","removeEventListener","fontFamily","textAlign","background","display","margin","justifyContent","padding","border","reload","App"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport _ from 'lodash';\n\nconst randomXY = (snake, gameContainerWidth, gameContainerHeight) => {\n  \n  let goodSpot = true\n  const randX = _.clamp(_.random(gameContainerWidth / 25) * 25, 25, gameContainerHeight - 25)\n  const randY = _.clamp(_.random(gameContainerHeight / 25) * 25, 25, gameContainerHeight - 25)\n  snake.segmentLocations.forEach((segment) =>{\n    if (_.isEqual([randX, randY], segment)){\n       goodSpot = false\n    }})\n\n  return goodSpot? [randX, randY]: randomXY(snake, gameContainerWidth, gameContainerHeight)\n\n}\n\nclass GameContainer {\n\n  constructor(width, height){\n    this.width = width\n    this.height = height\n    this.wallCollision = false\n    this.pause = false\n  }\n\n  update(snake, apple, score, setScore){\n    // If the game is not Paused then update\n    if (!this.pause){\n    // Update the snake, did it eat the apple or not\n    if (snake.ateApple(apple)){\n      // non random regeneration of apple for now\n      snake.update(true)\n       const [x, y] = randomXY(snake, this.width, this.height)\n       apple.x = x\n       apple.y = y\n       setScore(score + 1)\n    }\n    else{\n      snake.update(false)\n    }\n    // check of snake collided with wall\n    this.wallCollision = (snake.segmentLocations[0][0] >= this.width || snake.segmentLocations[0][0] < 0 || snake.segmentLocations[0][1] >= this.height || snake.segmentLocations[0][1] < 0)?  true: false\n  }\n    }\n\n  stop(){\n    this.pause = true\n  }\n\n  start(){\n    this.pause = false\n  }\n\n}\n\nclass Snake {\n\n  constructor()\n  {\n    this.segmentLocations = [[50,50], [25,50], [0,50]]\n    this.head = this.segmentLocations[0]\n    this.direction = \"right\"\n    this.crashed = false\n  }\n\n  ateApple(apple){\n    return (this.head[0] === apple.x && this.head[1] === apple.y)? true: false\n  }\n\n  checkIfCrashed(){\n    this.segmentLocations.slice(1,).forEach((segment) =>{\n    if (_.isEqual(this.head, segment)){\n       this.crashed = true\n    }})\n}\n\n  update(addSegment){\n    console.log(addSegment)\n    if (!this.crashed){\n      let currentHead\n      if (this.direction === \"right\"){\n        currentHead = [this.head[0] + 25, this.head[1]]\n      }\n      else if (this.direction === \"left\"){\n        currentHead = [this.head[0] - 25, this.head[1]]\n      }\n      else if (this.direction === \"up\"){\n        currentHead = [this.head[0], this.head[1] - 25]\n      }\n      else if (this.direction === \"down\"){\n        currentHead = [this.head[0], this.head[1] + 25]\n      }\n      this.head = currentHead\n      this.segmentLocations = [currentHead].concat(this.segmentLocations)\n\n      if (!addSegment){\n        this.segmentLocations.pop()\n      }\n      this.checkIfCrashed()\n  }\n}\n\n  changeDirection(direction){\n    this.direction = direction\n  }\n\n}\n\nclass Apple {\n\n  constructor(location)\n  {\n    this.x = location.x\n    this.y = location.y\n  }\n}\n\nconst gameContainer = new GameContainer(400, 400)\nconst snake = new Snake()\nconst apple = new Apple({x:100, y:100})\n\n\nconst Game = ({gameContainer, snake, apple}) => {\n\n  const canvasRef = useRef(null)\n  const [score, setScore] = useState(0)\n\n  const updateGameState = (gameContainer, snake, apple, ctx, score, setScore) => {\n\n    // Update gameContainer\n    gameContainer.update(snake, apple, score, setScore)\n    if (!gameContainer.wallCollision && !snake.crashed && !gameContainer.pause){\n        // Draw Game Container\n        ctx.clearRect(0,0, gameContainer.width, gameContainer.height)\n        ctx.fillStyle = 'black';\n        ctx.fillRect(0, 0, gameContainer.x, gameContainer.y)\n        // Draw Snake\n        ctx.fillStyle = 'green';\n        for (let index = 0; index < snake.segmentLocations.length; index++) {\n          const segment = snake.segmentLocations[index]\n          ctx.fillRect(segment[0], segment[1], 25, 25);\n          ctx.strokeRect(segment[0], segment[1], 25, 25)\n        }\n        // Draw Apple\n        ctx.fillStyle = 'red';\n        ctx.fillRect(apple.x, apple.y, 25, 25)\n        ctx.strokeRect(apple.x, apple.y, 25, 25)\n  }\n\n}\n\n  const controller = (event) => {\n\n    switch (event.code) {\n      case \"ArrowRight\":\n        snake.changeDirection(\"right\")\n        break\n      case \"ArrowLeft\":\n        snake.changeDirection(\"left\")\n        break\n      case \"ArrowUp\":\n        snake.changeDirection(\"up\")\n        break\n      case \"ArrowDown\":\n        snake.changeDirection(\"down\")\n        break\n      default:\n        break;\n    }\n    switch (event.keyCode ) {\n      case 32:\n        gameContainer.stop()\n        break\n      case 13:\n        gameContainer.start()\n        break\n      default:\n        break;\n    }\n\n  }\n\n \n  useEffect(() => {\n\n      const canvas = canvasRef.current\n      const ctx = canvas.getContext(\"2d\");\n\n      let gameState = setInterval(() => {updateGameState(gameContainer, snake, apple, ctx, score, setScore);}, 150)\n      window.addEventListener('keydown', controller);\n\n      return () => {\n      clearInterval(gameState)\n      window.removeEventListener('keydown', controller);\n      }\n  })\n\n\n  return(\n    <div>\n        <h1 style ={{fontFamily: \"'Press Start 2P', cursive\", textAlign: \"center\"}}> Snake</h1>\n        <canvas\n          style={{\n          background: \"#262626\",\n          display: \"block\",\n          margin: \"0 auto\" }}\n          id=\"myCanvas\"\n          width=\"400\"\n          height=\"400\"\n          ref={canvasRef}></canvas>\n          <div style={{display:\"flex\", justifyContent:\"center\", margin:10}}>\n            <div style={{padding:5, border:\"solid\"}}>\n              Pause: Space Bar\n            </div>\n            <div style={{padding:5, border:\"solid\"}}>\n              Continue: Enter\n            </div>\n            <div style={{padding:5, border:\"solid\"}}>\n              Arrow Keys Control Snake Direction\n            </div>\n          </div>\n          <div style={{display:\"flex\", justifyContent:\"center\"}}>\n          Score:{score}\n          </div>\n          <div onClick={() => window.location.reload()} style={{display:\"flex\", justifyContent:\"center\"}}>\n          New Game\n          </div>\n    </div>\n  )\n  }\n\nfunction App() {\n\n  return(\n    <>\n    <Game gameContainer={gameContainer} snake={snake} apple={apple}/>\n\n    </>\n  )\n\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/patrickwellins/Desktop/games/snake/src/App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport EventListener, { withOptions } from 'react-event-listener';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst genRandomXY = snakeBody => {\n  const y = Math.floor(Math.random() * 15) * 20;\n  const x = Math.floor(Math.random() * 23) * 20;\n  let recurse = false;\n\n  for (let i = 0; i < snakeBody.length; i++) {\n    let temp_x = snakeBody[i][0];\n    let temp_y = snakeBody[i][1];\n\n    if (x === temp_x && y === temp_y) {\n      recurse = true;\n    }\n  }\n\n  if (recurse) {\n    return genRandomXY(snakeBody);\n  } else {\n    return [x, y];\n  }\n};\n\nclass Snake {\n  constructor(x, y, direction) {\n    this.x = x;\n    this.y = y;\n    this.direction = direction;\n    this.snakeBody = {\n      0: [this.x, this.y],\n      1: [this.x - 20, this.y],\n      2: [this.x - 40, this.y],\n      3: [this.x - 60, this.y]\n    };\n    this.debugger = [];\n    this.pause = false;\n  }\n\n  changeDirection(direction) {\n    this.direction = direction;\n  }\n\n  getTail() {\n    return this.snakeBody[this.hasBody() - 1];\n  }\n\n  go() {\n    this.pause = false;\n  }\n\n  updatePostion(appleX, appleY) {\n    if (!this.pause) {\n      let tail = this.getTail();\n\n      if (this.hasBody() > 1) {\n        for (let i = this.hasBody() - 1; i >= 1; i--) {\n          this.snakeBody[i] = this.snakeBody[i - 1];\n        }\n      }\n\n      if (this.direction == 'up') {\n        this.y -= 20;\n      } else if (this.direction == 'down') {\n        this.y += 20;\n      } else if (this.direction == 'left') {\n        this.x -= 20;\n      } else if (this.direction == 'right') {\n        this.x += 20;\n      }\n\n      this.snakeBody[0] = [this.x, this.y];\n\n      if (this.x === appleX && this.y === appleY) {\n        this.debugger.push(tail);\n      }\n    }\n  }\n\n  add() {\n    if (this.debugger.length == 1) {\n      this.snakeBody[this.hasBody()] = this.debugger.pop();\n    }\n  }\n\n  hasBody() {\n    return Object.keys(this.snakeBody).length;\n  }\n\n  collided() {\n    for (let i = 1; i < this.hasBody(); i++) {\n      let temp_x = this.snakeBody[i][0];\n      let temp_y = this.snakeBody[i][1];\n\n      if (this.x === temp_x && this.y === temp_y) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  p() {\n    this.pause = true;\n  }\n\n  getSnakeCoords() {\n    return Object.values(this.snakeBody);\n  }\n\n}\n\nclass Apple {\n  constructor() {\n    let randCoords = genRandomXY(snake.getSnakeCoords());\n    this.x = randCoords[0];\n    this.y = randCoords[1];\n  }\n\n  collision(snakeX, snakeY) {\n    if (snakeX === this.x && snakeY === this.y) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  redraw(snakeX, snakeY) {\n    if (this.collision(snakeX, snakeY)) {\n      let randCoords = genRandomXY(snake.getSnakeCoords());\n      this.x = randCoords[0];\n      this.y = randCoords[1];\n    }\n  }\n\n  getX() {\n    return this.x;\n  }\n\n  getY() {\n    return this.y;\n  }\n\n}\n\nconst snake = new Snake(100, 100, 'right');\nconst apple = new Apple();\n\nconst Position = ({\n  stateX,\n  stateY\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginLeft: \"100px\"\n    },\n    children: [\" \", stateX, \" \", stateY, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Position;\nconst Game = /*#__PURE__*/React.memo(_c2 = _s(({\n  setStateX,\n  setStateY\n}) => {\n  _s();\n\n  let dx = 0;\n  let dy = 0;\n  let appleExists = false;\n  let cW;\n  let cH;\n\n  const gameLogic = (ctx, canvas) => {\n    if (!snake.collided()) {\n      drawSnake(ctx, canvas);\n      drawApple(ctx, canvas);\n      let x = apple.getX();\n      let y = apple.getY();\n      snake.updatePostion(x, y);\n      snake.add();\n      apple.redraw(snake.x, snake.y);\n    }\n  };\n\n  useEffect(() => {\n    const canvas = cRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    cW = canvas.width / 2;\n    cH = canvas.height / 2;\n    setStateX(cW);\n    setStateY(cH);\n    setInterval(() => {\n      gameLogic(ctx, canvas);\n    }, 150);\n    window.addEventListener('keydown', logKey, cW, cH);\n    return () => {\n      window.removeEventListener('keydown', logKey, cW, cH);\n    };\n  });\n\n  const logKey = event => {\n    if (event.code === \"ArrowRight\") {\n      snake.changeDirection(\"right\");\n    } else if (event.code === \"ArrowLeft\") {\n      snake.changeDirection(\"left\");\n    } else if (event.code === \"ArrowUp\") {\n      snake.changeDirection(\"up\");\n    } else if (event.code === \"ArrowDown\") {\n      snake.changeDirection(\"down\");\n    } else if (event.keyCode === 32) {\n      snake.p();\n    } else if (event.keyCode === 13) {\n      snake.go();\n    }\n  };\n\n  function drawSnake(ctx, canvas) {\n    const squareSide = 20;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.beginPath();\n    ctx.rect(snake.x, snake.y, squareSide, squareSide);\n\n    if (snake.hasBody() > 0) {\n      for (let i = 0; i <= snake.hasBody() - 1; i++) {\n        ctx.rect(snake.snakeBody[i][0], snake.snakeBody[i][1], squareSide, squareSide);\n      }\n    }\n\n    ctx.fillStyle = \"#388E3C\";\n    ctx.fill();\n    ctx.closePath();\n  }\n\n  function drawApple(ctx, canvas, x, y) {\n    const appleRadius = 10;\n    ctx.beginPath();\n    ctx.arc(apple.getX() + appleRadius, apple.getY() + appleRadius, appleRadius, 0, Math.PI * 2);\n    ctx.fillStyle = \"#D32F2F\";\n    ctx.fill();\n    ctx.closePath();\n  }\n\n  const cRef = useRef(null);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      style: {\n        background: \"#eee\",\n        display: \"block\",\n        margin: \"0 auto\"\n      },\n      id: \"myCanvas\",\n      width: \"480\",\n      height: \"320\",\n      ref: cRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 265,\n    columnNumber: 5\n  }, this);\n}, \"URm58pgjXa+ECeiVHN1N38QXQss=\"));\n_c3 = Game;\n\nfunction App() {\n  _s2();\n\n  const [stateX, setStateX] = useState(240);\n  const [stateY, setStateY] = useState(160);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Game, {\n      setStateX: setStateX,\n      setStateY: setStateY\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Position, {\n      stateX: stateX,\n      stateY: stateY\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 278,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(App, \"z/9Tpgp52heXM9WS/DEC/+/vP/U=\");\n\n_c4 = App;\nexport default App;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Position\");\n$RefreshReg$(_c2, \"Game$React.memo\");\n$RefreshReg$(_c3, \"Game\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"sources":["/Users/patrickwellins/Desktop/games/snake/src/App.js"],"names":["React","useState","useEffect","useRef","EventListener","withOptions","genRandomXY","snakeBody","y","Math","floor","random","x","recurse","i","length","temp_x","temp_y","Snake","constructor","direction","debugger","pause","changeDirection","getTail","hasBody","go","updatePostion","appleX","appleY","tail","push","add","pop","Object","keys","collided","p","getSnakeCoords","values","Apple","randCoords","snake","collision","snakeX","snakeY","redraw","getX","getY","apple","Position","stateX","stateY","marginLeft","Game","memo","setStateX","setStateY","dx","dy","appleExists","cW","cH","gameLogic","ctx","canvas","drawSnake","drawApple","cRef","current","getContext","width","height","setInterval","window","addEventListener","logKey","removeEventListener","event","code","keyCode","squareSide","clearRect","beginPath","rect","fillStyle","fill","closePath","appleRadius","arc","PI","background","display","margin","App"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport EventListener, {withOptions} from 'react-event-listener';\n\nconst genRandomXY = (snakeBody) => {\n\n    const y = Math.floor(Math.random() * 15) * 20\n    const x = Math.floor(Math.random() * 23) * 20\n    let recurse = false\n    for (let i = 0; i < snakeBody.length; i++){\n      let temp_x = snakeBody[i][0]\n      let temp_y = snakeBody[i][1]\n      if (x === temp_x && y === temp_y){\n        recurse = true\n      }\n    }\n    if (recurse){\n      return genRandomXY(snakeBody)\n    }\n    else{\n      return [x, y]\n    }\n}\n\nclass Snake {\n\n  constructor(x, y, direction) {\n    this.x = x\n    this.y = y\n    this.direction = direction\n    this.snakeBody = {0:[this.x , this.y], 1:[this.x - 20, this.y], 2:[this.x - 40, this.y], 3:[this.x - 60, this.y]}\n    this.debugger = []\n    this.pause = false\n  }\n\n  changeDirection(direction){\n    this.direction = direction\n  }\n\n  getTail(){\n    return this.snakeBody[this.hasBody() - 1]\n  }\n\n  go() {\n    this.pause = false\n  }\n\n  updatePostion(appleX, appleY){\n\n    if (!this.pause){\n\n    let tail = this.getTail()\n\n\n    if (this.hasBody() > 1){\n\n      for (let i = this.hasBody() - 1; i >= 1; i--){\n        this.snakeBody[i] = this.snakeBody[i - 1]\n      }\n  }\n\n\n    if (this.direction == 'up'){\n      this.y -= 20\n    }\n    else if (this.direction == 'down'){\n      this.y += 20\n    }\n    else if (this.direction == 'left'){\n      this.x -= 20\n    }\n    else if (this.direction == 'right'){\n      this.x += 20\n    }\n\n    this.snakeBody[0] = [this.x, this.y]\n\n    if (this.x === appleX && this.y === appleY){\n      this.debugger.push(tail)\n    }}\n  }\n\n  add(){\n    if (this.debugger.length == 1){\n      this.snakeBody[this.hasBody()] = this.debugger.pop()\n    }\n  }\n\n\n  hasBody() {\n    return Object.keys(this.snakeBody).length\n  }\n\n  collided() {\n\n      for (let i = 1; i < this.hasBody(); i++){\n          let temp_x = this.snakeBody[i][0]\n          let temp_y = this.snakeBody[i][1]\n          if (this.x === temp_x && this.y === temp_y){\n            return true\n          }\n      }\n      return false\n  }\n\n  p(){\n    this.pause = true\n  }\n\n  getSnakeCoords(){\n    return Object.values(this.snakeBody)\n  }\n\n\n}\n\nclass Apple {\n\n  constructor() {\n    let randCoords = genRandomXY(snake.getSnakeCoords())\n    this.x = randCoords[0]\n    this.y = randCoords[1]\n  }\n\n  collision(snakeX, snakeY) {\n    if (snakeX === this.x && snakeY === this.y){\n      return true\n    }\n    else{\n      return false\n    }\n  }\n\n  redraw(snakeX, snakeY){\n    if (this.collision(snakeX, snakeY)){\n      let randCoords = genRandomXY(snake.getSnakeCoords())\n      this.x = randCoords[0]\n      this.y = randCoords[1]\n    }\n  }\n\n  getX(){\n    return this.x\n  }\n\n  getY(){\n    return this.y\n  }\n\n}\n\nconst snake = new Snake(100, 100, 'right')\nconst apple = new Apple()\nconst Position = ({stateX, stateY}) => {\n\n  return(\n    <div style={{marginLeft: \"100px\"}}> {stateX} {stateY} </div>\n  )\n}\n\n\n\n\nconst Game = React.memo(({setStateX, setStateY}) => {\n\n  let dx = 0\n  let dy = 0\n\n  let appleExists = false\n  let cW\n  let cH\n\n  const gameLogic = (ctx, canvas) => {\n\n\n    if (!snake.collided()){\n      drawSnake(ctx, canvas)\n      drawApple(ctx, canvas)\n      let x = apple.getX()\n      let y = apple.getY()\n      snake.updatePostion(x, y)\n      snake.add()\n      apple.redraw(snake.x, snake.y)\n    }\n  }\n\n  useEffect(() => {\n\n      const canvas = cRef.current\n      const ctx = canvas.getContext(\"2d\");\n      cW = canvas.width/2\n      cH = canvas.height/2\n\n      setStateX(cW)\n      setStateY(cH)\n      setInterval(() => {gameLogic(ctx, canvas)}, 150)\n      window.addEventListener('keydown', logKey, cW, cH);\n      return () => {\n      window.removeEventListener('keydown', logKey, cW, cH);\n  }\n  })\n\n  const logKey = (event) => {\n\n    if (event.code === \"ArrowRight\"){\n      snake.changeDirection(\"right\")\n    }\n    else if (event.code === \"ArrowLeft\"){\n      snake.changeDirection(\"left\")\n    }\n    else if (event.code === \"ArrowUp\" ){\n      snake.changeDirection(\"up\")\n    }\n    else if (event.code === \"ArrowDown\"){\n      snake.changeDirection(\"down\")\n    }\n    else if (event.keyCode === 32){\n      snake.p()\n    }\n    else if (event.keyCode === 13){\n      snake.go()\n    }\n\n  }\n\n  function drawSnake(ctx, canvas) {\n\n\n    const squareSide = 20\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.beginPath()\n    ctx.rect(snake.x, snake.y, squareSide, squareSide);\n    if (snake.hasBody() > 0){\n\n      for (let i = 0; i <= snake.hasBody() - 1; i++){\n\n          ctx.rect(snake.snakeBody[i][0], snake.snakeBody[i][1], squareSide, squareSide);\n\n\n      }\n    }\n    ctx.fillStyle = \"#388E3C\";\n    ctx.fill();\n    ctx.closePath();\n\n}\n\n  function drawApple(ctx, canvas, x, y) {\n\n\n      const appleRadius = 10\n      ctx.beginPath()\n      ctx.arc(apple.getX() + appleRadius, apple.getY() + appleRadius, appleRadius, 0, Math.PI*2);\n      ctx.fillStyle = \"#D32F2F\";\n      ctx.fill();\n      ctx.closePath();\n\n\n    }\n\n\n\n\n  const cRef = useRef(null)\n  return(\n    <div>\n        <canvas  style={{ background: \"#eee\", display: \"block\", margin: \"0 auto\" }} id=\"myCanvas\" width=\"480\" height=\"320\" ref={cRef}></canvas>\n    </div>\n  )\n})\n\n\nfunction App() {\n\n  const [stateX, setStateX] = useState(240)\n  const [stateY, setStateY] = useState(160)\n\n  return (\n    <div>\n        <Game  setStateX={setStateX} setStateY={setStateY}/>\n        <Position stateX={stateX} stateY={stateY}/>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
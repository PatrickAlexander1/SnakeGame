{"ast":null,"code":"var _jsxFileName = \"/Users/patrickwellins/Documents/games/snake/src/App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport _ from 'lodash';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst APPLERADIUS = 10;\n\nconst randomXY = (snake, gameContainerWidth, gameContainerHeight) => {\n  let goodSpot = true;\n\n  const randX = _.clamp(_.random(gameContainerWidth / 25) * 25, 25, gameContainerHeight - 25);\n\n  const randY = _.clamp(_.random(gameContainerHeight / 25) * 25, 25, gameContainerHeight - 25);\n\n  snake.segmentLocations.forEach(segment => {\n    if (_.isEqual([randX, randY], segment)) {\n      goodSpot = false;\n    }\n  });\n  return goodSpot ? [randX, randY] : randomXY(snake, gameContainerWidth, gameContainerHeight);\n};\n\nclass GameContainer {\n  constructor(width, height) {\n    this.width = width;\n    this.height = height;\n    this.wallCollision = false;\n    this.pause = false;\n  }\n\n  update(snake, apple) {\n    // If the game is not Paused then update\n    if (!this.pause) {\n      // Update the snake, did it eat the apple or not\n      if (snake.segmentLocations[0][0] === apple.x && snake.segmentLocations[0][1] === apple.y) {\n        // non random regeneration of apple for now\n        snake.update(true);\n        const [x, y] = randomXY(snake, this.width, this.height);\n        apple.x = x;\n        apple.y = y;\n      } else {\n        snake.update(false);\n      } // check of snake collided with wall\n\n\n      this.wallCollision = snake.segmentLocations[0][0] >= this.width || snake.segmentLocations[0][0] < 0 || snake.segmentLocations[0][1] >= this.height || snake.segmentLocations[0][1] < 0 ? true : false;\n    }\n  }\n\n  stop() {\n    this.pause = true;\n  }\n\n  start() {\n    this.pause = false;\n  }\n\n}\n\nclass Snake {\n  constructor() {\n    this.segmentLocations = [[50, 50], [25, 50], [0, 50]];\n    this.head = this.segmentLocations[0];\n    this.direction = \"right\";\n    this.crashed = false;\n  }\n\n  checkIfCrashed() {\n    this.segmentLocations.slice(1).forEach(segment => {\n      if (_.isEqual(this.head, segment)) {\n        this.crashed = true;\n      }\n    });\n  }\n\n  update(addSegment) {\n    console.log(addSegment);\n\n    if (!this.crashed) {\n      let currentHead;\n\n      if (this.direction === \"right\") {\n        currentHead = [this.head[0] + 25, this.head[1]];\n      } else if (this.direction === \"left\") {\n        currentHead = [this.head[0] - 25, this.head[1]];\n      } else if (this.direction === \"up\") {\n        currentHead = [this.head[0], this.head[1] - 25];\n      } else if (this.direction === \"down\") {\n        currentHead = [this.head[0], this.head[1] + 25];\n      }\n\n      this.head = currentHead;\n      this.segmentLocations = [currentHead].concat(this.segmentLocations);\n\n      if (!addSegment) {\n        this.segmentLocations.pop();\n      }\n\n      this.checkIfCrashed();\n    }\n  }\n\n  changeDirection(direction) {\n    this.direction = direction;\n  }\n\n}\n\nclass Apple {\n  constructor(location) {\n    this.x = location.x;\n    this.y = location.y;\n  }\n\n}\n\nconst ScoreComponent = () => {\n  _s();\n\n  const [score, setScore] = useState(0);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\"\n    },\n    children: score\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ScoreComponent, \"dhwb4Jf0iOwsc3rUivvi1/f596M=\");\n\n_c = ScoreComponent;\n\nconst Game = () => {\n  _s2();\n\n  const gameContainer = new GameContainer(400, 400);\n  const snake = new Snake();\n  const apple = new Apple({\n    x: 100,\n    y: 100\n  });\n  const canvasRef = useRef(null);\n\n  const updateGameState = (gameContainer, snake, apple, ctx) => {\n    // Update gameContainer\n    gameContainer.update(snake, apple);\n\n    if (!gameContainer.wallCollision && !snake.crashed && !gameContainer.pause) {\n      // Draw Game Container\n      ctx.clearRect(0, 0, gameContainer.width, gameContainer.height);\n      ctx.fillStyle = 'black';\n      ctx.fillRect(0, 0, gameContainer.x, gameContainer.y); // Draw Snake\n\n      ctx.fillStyle = 'green';\n\n      for (let index = 0; index < snake.segmentLocations.length; index++) {\n        const segment = snake.segmentLocations[index];\n        ctx.fillRect(segment[0], segment[1], 25, 25);\n        ctx.strokeRect(segment[0], segment[1], 25, 25);\n      } // Draw Apple\n\n\n      ctx.fillStyle = 'red';\n      ctx.fillRect(apple.x, apple.y, 25, 25);\n      ctx.strokeRect(apple.x, apple.y, 25, 25);\n    }\n  };\n\n  const controller = event => {\n    switch (event.code) {\n      case \"ArrowRight\":\n        snake.changeDirection(\"right\");\n        break;\n\n      case \"ArrowLeft\":\n        snake.changeDirection(\"left\");\n        break;\n\n      case \"ArrowUp\":\n        snake.changeDirection(\"up\");\n        break;\n\n      case \"ArrowDown\":\n        snake.changeDirection(\"down\");\n        break;\n\n      default:\n        break;\n    }\n\n    switch (event.keyCode) {\n      case 32:\n        gameContainer.stop();\n        break;\n\n      case 13:\n        gameContainer.start();\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    let gameState = setInterval(() => {\n      updateGameState(gameContainer, snake, apple, ctx);\n    }, 150);\n    window.addEventListener('keydown', controller);\n    return () => {\n      clearInterval(gameState);\n      window.removeEventListener('keydown', controller);\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        fontFamily: \"'Press Start 2P', cursive\",\n        textAlign: \"center\"\n      },\n      children: \" Snake\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      style: {\n        background: \"#262626\",\n        display: \"block\",\n        margin: \"0 auto\"\n      },\n      id: \"myCanvas\",\n      width: \"400\",\n      height: \"400\",\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        margin: 10\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: 5,\n          border: \"solid\"\n        },\n        children: \"Pause: Space Bar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: 5,\n          border: \"solid\"\n        },\n        children: \"Continue: Enter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: 5,\n          border: \"solid\"\n        },\n        children: \"Arrow Keys Control Snake Direction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 206,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(Game, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n\n_c2 = Game;\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Game, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n\n_c3 = App;\nexport default App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ScoreComponent\");\n$RefreshReg$(_c2, \"Game\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"sources":["/Users/patrickwellins/Documents/games/snake/src/App.js"],"names":["React","useState","useEffect","useRef","_","APPLERADIUS","randomXY","snake","gameContainerWidth","gameContainerHeight","goodSpot","randX","clamp","random","randY","segmentLocations","forEach","segment","isEqual","GameContainer","constructor","width","height","wallCollision","pause","update","apple","x","y","stop","start","Snake","head","direction","crashed","checkIfCrashed","slice","addSegment","console","log","currentHead","concat","pop","changeDirection","Apple","location","ScoreComponent","score","setScore","display","justifyContent","Game","gameContainer","canvasRef","updateGameState","ctx","clearRect","fillStyle","fillRect","index","length","strokeRect","controller","event","code","keyCode","canvas","current","getContext","gameState","setInterval","window","addEventListener","clearInterval","removeEventListener","fontFamily","textAlign","background","margin","padding","border","App"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport _ from 'lodash';\nconst APPLERADIUS = 10\n\nconst randomXY = (snake, gameContainerWidth, gameContainerHeight) => {\n  \n  let goodSpot = true\n  const randX = _.clamp(_.random(gameContainerWidth / 25) * 25, 25, gameContainerHeight - 25)\n  const randY = _.clamp(_.random(gameContainerHeight / 25) * 25, 25, gameContainerHeight - 25)\n  snake.segmentLocations.forEach((segment) =>{\n    if (_.isEqual([randX, randY], segment)){\n       goodSpot = false\n    }})\n\n  return goodSpot? [randX, randY]: randomXY(snake, gameContainerWidth, gameContainerHeight)\n\n}\n\nclass GameContainer {\n\n  constructor(width, height){\n    this.width = width\n    this.height = height\n    this.wallCollision = false\n    this.pause = false\n  }\n\n  update(snake, apple){\n\n    // If the game is not Paused then update\n    if (!this.pause){\n    // Update the snake, did it eat the apple or not\n    if (snake.segmentLocations[0][0] === apple.x && snake.segmentLocations[0][1] === apple.y){\n      // non random regeneration of apple for now\n      snake.update(true)\n       const [x, y] = randomXY(snake, this.width, this.height)\n       apple.x = x\n       apple.y = y\n       \n    }\n    else{\n      snake.update(false)\n    }\n    // check of snake collided with wall\n    this.wallCollision = (snake.segmentLocations[0][0] >= this.width || snake.segmentLocations[0][0] < 0 || snake.segmentLocations[0][1] >= this.height || snake.segmentLocations[0][1] < 0)?  true: false\n  }\n    }\n\n  stop(){\n    this.pause = true\n  }\n\n  start(){\n    this.pause = false\n  }\n\n}\n\nclass Snake {\n\n  constructor()\n  {\n    this.segmentLocations = [[50,50], [25,50], [0,50]]\n    this.head = this.segmentLocations[0]\n    this.direction = \"right\"\n    this.crashed = false\n  }\n\n  checkIfCrashed(){\n    this.segmentLocations.slice(1,).forEach((segment) =>{\n    if (_.isEqual(this.head, segment)){\n       this.crashed = true\n    }})\n}\n\n  update(addSegment){\n    console.log(addSegment)\n    if (!this.crashed){\n      let currentHead\n      if (this.direction === \"right\"){\n        currentHead = [this.head[0] + 25, this.head[1]]\n      }\n      else if (this.direction === \"left\"){\n        currentHead = [this.head[0] - 25, this.head[1]]\n      }\n      else if (this.direction === \"up\"){\n        currentHead = [this.head[0], this.head[1] - 25]\n      }\n      else if (this.direction === \"down\"){\n        currentHead = [this.head[0], this.head[1] + 25]\n      }\n      this.head = currentHead\n      this.segmentLocations = [currentHead].concat(this.segmentLocations)\n\n      if (!addSegment){\n        this.segmentLocations.pop()\n      }\n      this.checkIfCrashed()\n  }\n}\n\n  changeDirection(direction){\n    this.direction = direction\n  }\n\n}\n\nclass Apple {\n\n  constructor(location)\n  {\n    this.x = location.x\n    this.y = location.y\n  }\n}\n\nconst ScoreComponent = () => {\n  const [score, setScore] = useState(0)\n  return(\n    <div style={{display:\"flex\", justifyContent:\"center\"}}>\n    {score}\n    </div>\n  )\n}\n\n\nconst Game = () => {\n\n  const gameContainer = new GameContainer(400, 400)\n  const snake = new Snake()\n  const apple = new Apple({x:100, y:100})\n  const canvasRef = useRef(null)\n\n  const updateGameState = (gameContainer, snake, apple, ctx) => {\n\n    // Update gameContainer\n    gameContainer.update(snake, apple)\n    if (!gameContainer.wallCollision && !snake.crashed && !gameContainer.pause){\n        // Draw Game Container\n        ctx.clearRect(0,0, gameContainer.width, gameContainer.height)\n        ctx.fillStyle = 'black';\n        ctx.fillRect(0, 0, gameContainer.x, gameContainer.y)\n        // Draw Snake\n        ctx.fillStyle = 'green';\n        for (let index = 0; index < snake.segmentLocations.length; index++) {\n          const segment = snake.segmentLocations[index]\n          ctx.fillRect(segment[0], segment[1], 25, 25);\n          ctx.strokeRect(segment[0], segment[1], 25, 25)\n        }\n        // Draw Apple\n        ctx.fillStyle = 'red';\n        ctx.fillRect(apple.x, apple.y, 25, 25)\n        ctx.strokeRect(apple.x, apple.y, 25, 25)\n  }\n\n}\n\n  const controller = (event) => {\n\n    switch (event.code) {\n      case \"ArrowRight\":\n        snake.changeDirection(\"right\")\n        break\n      case \"ArrowLeft\":\n        snake.changeDirection(\"left\")\n        break\n      case \"ArrowUp\":\n        snake.changeDirection(\"up\")\n        break\n      case \"ArrowDown\":\n        snake.changeDirection(\"down\")\n        break\n      default:\n        break;\n    }\n    switch (event.keyCode ) {\n      case 32:\n        gameContainer.stop()\n        break\n      case 13:\n        gameContainer.start()\n        break\n      default:\n        break;\n    }\n\n  }\n\n \n  useEffect(() => {\n\n      const canvas = canvasRef.current\n      const ctx = canvas.getContext(\"2d\");\n\n      let gameState = setInterval(() => {updateGameState(gameContainer, snake, apple, ctx);}, 150)\n      window.addEventListener('keydown', controller);\n\n      return () => {\n      clearInterval(gameState)\n      window.removeEventListener('keydown', controller);\n      }\n  })\n\n\n  return(\n    <div>\n        <h1 style ={{fontFamily: \"'Press Start 2P', cursive\", textAlign: \"center\"}}> Snake</h1>\n        <canvas\n          style={{\n          background: \"#262626\",\n          display: \"block\",\n          margin: \"0 auto\" }}\n          id=\"myCanvas\"\n          width=\"400\"\n          height=\"400\"\n          ref={canvasRef}></canvas>\n          <div style={{display:\"flex\", justifyContent:\"center\", margin:10}}>\n            <div style={{padding:5, border:\"solid\"}}>\n              Pause: Space Bar\n            </div>\n            <div style={{padding:5, border:\"solid\"}}>\n              Continue: Enter\n            </div>\n            <div style={{padding:5, border:\"solid\"}}>\n              Arrow Keys Control Snake Direction\n            </div>\n          </div>\n    </div>\n  )\n  }\n\nfunction App() {\n\n  return(\n    <>\n    <Game/>\n    </>\n  )\n\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}